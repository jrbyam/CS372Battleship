February 11th, 2016:
Yesterday I confirmed with Dr. Chappell that using Unity is a viable option as we will be able to display and execute testing and game code in class.
With that, I created a base 2D Unity project and committed it to the repository that I made last week. It took me only 5 minutes or so; I already set up the
repo and had a Unity account in place.
After that I spent about 20 minutes writing out a few User Stories and assigning them respective difficulties. The hope is that we'll be able to extract
all the requirements we need from these.

February 12th, 2016:
Today we presented in class a few of our user stories and the basic overview of our project so far. I added a few more user stories after hearing proposed
features from other groups that I like but didn't think of myself.

February 15th, 2016:
James and I met up in Arctic Java today with the intent of talking over and writing up our requirements document and our design document. We finished both
these goals after about an hour of me being there. We derived most of our requirements from the user stories we came up with last week. Those were very 
helpful in making sure we covered all the bases in our requirements. There was a bit more "winging it" with the design document. We just wrote out the flow
of play broken up into scenes and each scene's components. After covering the intended look of the game, we moved on to what we felt would be best under the
hood. We talked over what classes we should have, what members each class would need to include and what role each of these would play in the overall game.
With the design document all hashed out, we have a very clear direction in which to proceed in beginning to write the code. So far, I am very pleased with the
software development process as described in class. No complaints.
We also spent a few minutes of me showing James a few small things in Unity that I've picked up, just so we can be mostly on the same page in that department.

February 17th, 2016:
Today in class we did pair programming! We didn't really get very far, not having much time, so I haven't yet formed an opinion on PP. We did figure out which
of our requirements we'd like to achieve with TDD, and we are going to meet on Friday to continue pair prgramming. I should be able to form an opinion of PP by
then.

February 19th, 2016:
James and I spent an hour or so today trying to finish what we started on Wednesday. We could not get NSubstitute, our unit testing framework, to work 
properly. The documentation did not seem to match up with the functionality of the framework. I am going to spend some time this weekend trying to get some 
tests written and implemented, whether that means using NSubstitute or not.

February 23rd, 2016:
I have spent several hours this evening trying to figure out the unit testing framework in Unity. The documentation is simply not lining up with what I see.
It's extremely frustrating. All the documentation is based on an older version of Unity and is largely obselete. I keep getting an error,
MissingMethodException, that according to MANY forums is due to magical DLL issues. The only solutions offered were of the type "I tried this random thing and
it worked so maybe this will help". I eventually got tired of this and switched over to using the integration testing system instead. I successfully wrote and
got one test to fail, then getting it to pass. So far, I'm very annoyed with TDD. I'm doing it because it's part of this assignment. Otherwise, I would NEVER
spend this much time on something with (in my opinion) almost no actual benefit. 
I'm just a little upset.

February 24th, 2016:
Today, I decided to try the unit testing system again. It's just so promisingly simple according to the documentation. So, for a few minutes before class, the
entire pair programming session and about 3 hours this evening I have been trying to find a way around the mysterious MissingMethodException. I'm done trying.
I got the tests back to where they were last night using the integration testing system. This is going to have to be good enough.

February 25th, 2016:
TDD has grown on me a little. I spent about 45 minutes earlier today and completed the TDD process for 10 tests, resulting in the implementation of 5 features.
This evening I spent an hour and a half or so adding the beginnings of a grid, complete with highlighting when touched.

March 3rd, 2016:
Today I spent a little over an hour working on menu UI. Nothing too exciting. I also imported some really nice 3D models of warships. We'll see where we go
next.

March 6th, 2016:
3 and a half hours of solid coding today brought me to a place where I can say (with relative confidence) that the ship placing logic is all hashed out. I'm 
using mobile touch-input. One finger moves a ship after it's been "grabbed" and another can be used to change the angle (and therefore orientation) of the
ship. The grid squares to which the ship will snap at any given position/orientation (if the finger is lifted) are now displayed using highlighting. I'm quite
proud of it, I must say. I also must say that I did not follow TDD for this coding session. I felt much freer to problem-solve without conceding to the 
obligation of writing tests first. I have come to the firm conclusion that I do not like TDD very much at all.

March 7th, 2016:
I spent an hour or so cleaning up my code from yesterday and adding in the American versions of the already-included Russian ship models. It looks dang good.

March 10th, 2016:
I binge coded today, about the same amount of time I spent on Sunday (the 6th). The game is now winnable, which is good, but it is also beautiful, which is 
even better. I added animations for both hits and misses and have the ships show on fire if they have been sunk. The game ends when either player has sunk all
of the opponents ships and a scene with the winner's name and fireworks appears. I'm pretty proud of it.
I did break a few tests, though, becasue I restructured how I'm handling ship placement. I'll need to fix that before noon tomorrow.

March 11th, 2016:
I spent about an hour just now fixing the tests (they pass again), cleaning and commenting the code and doing one last test run on the device. James added some
sweet sounds and did the User Documentation for us so I beleive we are good to go. This was fun. I very much enjoyed this project.
